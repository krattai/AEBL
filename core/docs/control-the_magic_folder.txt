The most important aspect to working with the AEBL, is the control folder.

The AEBL framework is being developed as a FBP (Flow Based Programming) methodology.  That means that there is a primary focus on data and flow, rather than the more traditional process focus.  As such, AEBL makes significant use of messaging, and the control folder is the main I/O for this message system.

In order to handle this messaging, a program, at this point a bash script called ctrlwtch.sh, runs at AEBL start and stays resident, watching the control folder for input messages, which then triggers the path the input will follow.

One can consider the combination of control folder and ctrlwtch.sh as the API, by which all interaction with AEBL will occur and which can be used for external, add on application developers.  ie.  AEBL can be controlled by manually placing triggers into the control folder and receive responses in the control folder, and therefore, so can an application.

As AEBL is further developed, the control folder and how to interact with AEBL, will be documented.

Current functions of the control folder (when file placed in control folder):
+ reboot - causes an AEBL to reboot
+ .newctrl - this is a system message, processes new ctrlwtch.sh file
+ patch - causes AEBL to do an immediate, manual patch
+ showpl - shows the contents in the pl folder, for stand alone AEBLs
+ cchan* - sets channel(s) to follow and playback (still being implemented)
+ *.mp3 and *.mp4 files - adds mp3 and mp4 files to play list
+ replace missing admin docs - system function to replace missing admin docs
+ halt - causes system to halt / turn off
+ noauto - a feature that prevents an AEBL from auto playback on startup
+ auto - a feature that causes an AEBL to auto playback on startup
+ next - skips current content for next in playlist
+ rmfiles - for stand alone AEBL, the contents of the file should be file names
+ newpl - new playlist, contents of file should be mp4 files, at this time
+ resetpl - moves stand alone AEBL files back to pl folder from mp4 and mp3 dirs
+ mkblade - file contains blade name, installs blade, only one per request
+ rmblade - files contains blade name, removes blade, only one per request
+ wlan - file that contains wlan info, right now only works for open networks
