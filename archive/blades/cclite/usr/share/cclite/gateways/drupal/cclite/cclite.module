<?php
// $Id$
function cclite_block($op = 'list', $delta = 0, $edit = array()) {
    // The $op parameter determines what piece of information is being requested.
    switch ($op) {
        case 'list':
            // If $op is "list", we just need to return a list of block descriptions.
            // This is used to provide a list of possible blocks to the administrator,
            // end users will not see these descriptions.
            $blocks[0]['info'] = t('cclite info block');
            // $blocks[1]['info'] = t('Example: empty block');
            return $blocks;
        case 'configure':
            // If $op is "configure", we need to provide the administrator with a
            // configuration form. The $delta parameter tells us which block is being
            // configured. In this example, we'll allow the administrator to customize
            // the text of the first block.
            $form = array();
            if ($delta == 0) {
                $form = cclite_admin_settings();
            }
            return $form;
        case 'save':
            // If $op is "save", we need to save settings from the configuration form.
            // Since the first block is the only one that allows configuration, we
            // need to check $delta to make sure we only save it.
            if ($delta == 0) {
                // Have Drupal save the string to the ddrupal_goto($path)atabase.
                variable_set('cclite_string', $edit['cclite_string']);
            }
            return;
        case 'view':
        default:
            global $user;
            $username = $user->name;
            // don't bother to show a summary block if there's no user...
            if (strlen($username)) {
                $cclite_block_head = "trading summary for " . $username . "<br/>";
                // If $op is "view", then we need to generate the block for display
                // purposes. The $delta parameter tells us which block is being requested.
                switch ($delta) {
                    case 0:
                        // The subject is displayed at the top of the block. Note that it
                        // should be passed through t() for translation.
                        # $block['subject'] = t('Title of block #1')." ".$username."eeeeee" ;
                        // The content of the block is typically generated by calling a custom
                        // function.
                        $block['content'] = $cclite_block_head . cclite_contents('block');
                    break;
                    case 1:
                        #   $block['subject'] = t('Title of block #2')." ".$username."eeeeee" ;
                        $block['content'] = $cclite_block_head . cclite_contents(2);
                    break;
                }
            }
            return $block;
    }
}
// used to transport merchant key hash
function urlsafe_b64encode($string) {
    $data = base64_encode($string);
    $data = str_replace(array('+', '/', '='), array('-', '_', ''), $data);
    return $data;
}
function urlsafe_b64decode($string) {
    $data = str_replace(array('-', '_'), array('+', '/'), $string);
    $mod4 = strlen($data) % 4;
    if ($mod4) {
        $data.= substr('====', $mod4);
    }
    return base64_decode($data);
}
function cclite_remote_logon() {
    global $user;
    $username = $user->name;
    // not worth trying if no drupal user name
    if (strlen($username)) {
        $api_hash = hash(variable_get('cclite_hashing_algorithm', 'sha512'), (variable_get('cclite_api_key', '') . $_SERVER['SERVER_ADDR']), 'true');
        $api_hash = urlsafe_b64encode($api_hash);
        // construct the payment url from configuration information
        $cclite_base_url = variable_get('cclite_protocol', 'http') . '://' . variable_get('cclite_payment_domain', '');
        $registry = variable_get('cclite_registry', '');
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);
        curl_setopt($ch, CURLOPT_COOKIE, "merchant_key_hash=$api_hash");
        curl_setopt($ch, CURLOPT_COOKIESESSION, TRUE);
        curl_setopt($ch, CURLOPT_FAILONERROR, TRUE);
        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);
        curl_setopt($ch, CURLOPT_FRESH_CONNECT, TRUE);
        curl_setopt($ch, CURLOPT_HEADER, TRUE);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
        curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/logon/$username/$registry/$api_hash");
        $logon = curl_exec($ch);
        curl_close($ch);
        preg_match_all('|Set-Cookie: (.*);|U', $logon, $results);
        $cookies = implode("; ", $results[1]);
        return array($logon, $cookies);
    } else {
        return array('failed', $cookies);
    }
}
// default operation is deliver a transaction summary to user
function cclite_contents() {
    global $user;
    $username = $user->name;
    $arg_list = func_get_args();
    $numargs = count($arg_list);
    $block_content = '';
    $cclite_operation = '';
    //  debug arguments passed
    $stuff = "|" . implode("-", $arg_list) . "|";
    // construct the payment url from configuration information
    $cclite_base_url = variable_get('cclite_protocol', 'http') . '://' . variable_get('cclite_payment_domain', '');
    $path_prefix = variable_get('cclite_REST_path', 'cclite');
    $ch = curl_init();
    log_debug("operation code", $arg_list[0]);
    if ($arg_list[0] != 'adduser') {
        $logon_result = cclite_remote_logon();
        //     log_debug("logon result $logon_result[0]  $logon_result[1]" );
        if (strlen($logon_result[1])) {
            curl_setopt($ch, CURLOPT_COOKIE, $logon_result[1]);
        } else {
            return;
        }
    }
    log_debug("logon result 1", $logon_result[1]);
    curl_setopt($ch, CURLOPT_AUTOREFERER, TRUE);
    curl_setopt($ch, CURLOPT_COOKIESESSION, TRUE);
    curl_setopt($ch, CURLOPT_FAILONERROR, FALSE);
    curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
    curl_setopt($ch, CURLOPT_FRESH_CONNECT, FALSE);
    curl_setopt($ch, CURLOPT_HEADER, FALSE);
    curl_setopt($ch, CURLOPT_POST, TRUE);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 30);
    // this switch statement needs to map to the Rewrites in the cclite .htaccess file, so if you're
    // doing something custom-made, you need to think about:
    // -here-, .htaccess and various bits of login in the cclite motor
    switch ($arg_list[0]) {
        case 'recent':
            // $block_content = "case recent transactions : $arg_list[0]/$arg_list[1]" ;
            curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/recent/transactions");
        break;
        case 'summary':
            // $block_content = "case summary : $arg_list[0]  $arg_list[1]/$arg_list[2]/$arg_list[3]/$arg_list[4]/$arg_list[5]" ;
            curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/summary");
        break;

        case 'block':
            // $block_content = "case summary : $arg_list[0]  $arg_list[1]/$arg_list[2]/$arg_list[3]/$arg_list[4]/$arg_list[5]" ;
            curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/summary");
        break;

        case 'pay':
            if (! user_access('make payments')) {
                return "$username not authorised to make payments" ;
            }
            // pay/test1/dalston/23/hack(s) using the merchant key
            // accept plural or singular version of currency name
            $pattern = '/(\S+)s/i';
            $replacement = '${1}';
            $arg_list[4] = preg_replace($pattern, $replacement, $arg_list[4]);
            //  $block_content = "case pay : $cclite_base_url/$arg_list[0]/$arg_list[1]/$arg_list[2]/$arg_list[3]/$arg_list[4]" ;
            curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/pay/$arg_list[1]/$arg_list[2]/$arg_list[3]/$arg_list[4]");
        break;
        case 'adduser':
            // direct/adduser/dalston/test1/email using the merchant key, without using individual logon
            $block_content = "case adduser : $stuff/$key";
            log_debug("in adduser ", "$cclite_base_url/direct/adduser/$arg_list[1]/$arg_list[2]/$arg_list[3]");
            curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/direct/adduser/$arg_list[1]/$arg_list[2]/$arg_list[3]");
        break;
        case 'modifyuser':
            // direct/modifyuser/dalston/test1/email using the merchant key, without using individual logon
            // non-working at present...
            $block_content = "case modifyuser : $stuff/$key";
            log_debug("in modifyuser ", "$cclite_base_url/direct/modifyuser/$arg_list[1]/$arg_list[2]/$arg_list[3]");
            curl_setopt($ch, CURLOPT_URL, "$cclite_base_url/direct/modifyuser/$arg_list[1]/$arg_list[2]/$arg_list[3]");
        break;
        // nothing to display in 
        default:
            $path_prefix = variable_get('cclite_REST_path', 'cclite');
           return "No cclite function selected use <a title=\"cclite passthrough help\" href=\"/$path_prefix/help\">help</a>" ;
    }
    $block_content = curl_exec($ch);
    curl_close($ch);
    // $block_content = $cclite_base_url ;
    return $block_content;
}
// function cclite_perm, make_payments is separate because one of the main models is just passing display data through
function cclite_perm() {
    return array('access cclite content', 'make payments', 'administer cclite');
}


function cclite_menu($access = 'access cclite content') {
    $items = array();
    $path_prefix = variable_get('cclite_REST_path', 'cclite');
    // single operation such as summary/recent transactions etc.
    $items[] = array('path' => "$path_prefix", 'title' => t("$path_prefix passthrough"), 'callback' => 'cclite_contents', 'access' => 1, 'type' => MENU_CALLBACK);
    // API settings URL
    $items[] = array('path' => "admin/settings/cclite", 'title' => t("Cclite API settings"), 'description' => t('Cclite provisional api key settings'), 'callback' => 'drupal_get_form', 'callback arguments' => array('cclite_admin_settings'), 'access' => user_access('administer cclite'), 'type' => MENU_NORMAL_ITEM);
    return $items;
}


// All configuration variables are cclite_xxxxx to give distinct namespace
function cclite_admin_settings() {
    $form['cclite_payment_domain'] = array('#type' => 'textfield', '#title' => t('Payment URL'), '#default_value' => variable_get('cclite_payment_domain', t('www.yourcclite.tld')), '#description' => t('Domain hosting cclite used as payment system', array('@form' => url('contact'))),);
    $form['cclite_protocol'] = array('#type' => 'select', '#title' => t('Protocol'), '#options' => drupal_map_assoc(array('http', 'https')), '#default_value' => variable_get('cclite_protocol', 'http'), '#description' => t('Transfer protocol used between drupal and cclite.'),);
    $form['cclite_api_key'] = array('#type' => 'textfield', '#title' => t('API Key'), '#default_value' => variable_get('cclite_api_key', t('123456')), '#description' => t('API Key generated by Cclite for this application', array('@form' => url('contact'))),);
    $form['cclite_hashing_algorithm'] = array('#type' => 'select', '#title' => t('Hashing Algorithm'), '#options' => drupal_map_assoc(array('sha1', 'sha256', 'sha512')), '#default_value' => variable_get('cclite_hashing_algorithm', 'sha512'), '#description' => t('Hashing algorithm used to pass the api key hashed up.'),);
    $form['cclite_api_password'] = array('#type' => 'textfield', '#title' => t('API Password'), '#default_value' => variable_get('cclite_api_password', t('password')), '#description' => t('API Password generated by Cclite for this application', array('@form' => url('contact'))),);
    $form['cclite_registry'] = array('#type' => 'textfield', '#title' => t('cclite registry'), '#default_value' => variable_get('cclite_registry', t('registry-name')), '#description' => t('The registry used in association with this passthrough', array('@form' => url('contact'))),);
    $form['cclite_REST_path'] = array('#type' => 'textfield', '#title' => t('cclite REST path'), '#default_value' => variable_get('cclite_REST_path', t('cclite')), '#description' => t('Prefix for REST style cclite transactions from drupal: http:://www.drupalsite.com/<b>cclite_REST_path</b>/summary for example', array('@form' => url('contact'))),);
    return system_settings_form($form);
}
// deal with user updates etc. etc.
function cclite_user($op, &$edit, &$account, $category = NULL) {
    $registry = variable_get('cclite_registry', '');
    //str_replace('@', '%40', $edit['mail']);
    switch ($op) {
        case 'insert':
            cclite_contents('adduser', $registry, $edit['name'], $edit['mail']);
        break;
        case 'after_update':
            global $user;
            $username = $user->name;
            cclite_contents('modifyuser', $registry, $username, $edit['mail']);
        break;
        case 'delete':
        break;
        default:
        break;
    }
    return;
}


function cclite_help($section) {

 
  switch ($section) {

    case 'cclite/help':
      return '<p>'. t('This is the first version of the drupal cclite passthrough. If you set up a user, a stub user will be set up in cclite. There are fine grained permissions for the module, access and payment. If you want to separate, set up a role for users that can do payments<br/><br/>

The api key (I\'ve used a guid for this version), needs to be the same in the cclite registry and in the module setup. The server address also needs to be entered in the registry setup. <b>Only one registry is allowed at present</b>.
<br/><br/>
The interface is RESTful, these are some of the things that should work:
<code>http://www.mydrupal.com/cclite/summary</code>  summary of transactions, same output as you get when you enable the cclite block<br/>
<code>http://www.mydrupal.com/recent/transactions</code>  see recent transactions<br/>
<code>http:/www.mydrupal.com/cclite//pay/test1/dalston/23/hacks</code>  user must be authorised for payment, currency word can be singular or plural<br/>


') .'</p>';
    case 'cclite/help/pay':
      return '<p>'. t('Help on payment') .'</p>';

  }

}



