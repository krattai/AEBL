// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: include/Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "include/Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xtreemfs {
namespace pbrpc {

namespace {

const ::google::protobuf::Descriptor* emptyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emptyRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* emptyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  emptyResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_include_2fCommon_2eproto() {
  protobuf_AddDesc_include_2fCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "include/Common.proto");
  GOOGLE_CHECK(file != NULL);
  emptyRequest_descriptor_ = file->message_type(0);
  static const int emptyRequest_offsets_[1] = {
  };
  emptyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emptyRequest_descriptor_,
      emptyRequest::default_instance_,
      emptyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emptyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emptyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emptyRequest));
  emptyResponse_descriptor_ = file->message_type(1);
  static const int emptyResponse_offsets_[1] = {
  };
  emptyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      emptyResponse_descriptor_,
      emptyResponse::default_instance_,
      emptyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emptyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(emptyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(emptyResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_include_2fCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emptyRequest_descriptor_, &emptyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    emptyResponse_descriptor_, &emptyResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_include_2fCommon_2eproto() {
  delete emptyRequest::default_instance_;
  delete emptyRequest_reflection_;
  delete emptyResponse::default_instance_;
  delete emptyResponse_reflection_;
}

void protobuf_AddDesc_include_2fCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024include/Common.proto\022\016xtreemfs.pbrpc\"\016"
    "\n\014emptyRequest\"\017\n\remptyResponseB(\n&org.x"
    "treemfs.pbrpc.generatedinterfaces", 113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "include/Common.proto", &protobuf_RegisterTypes);
  emptyRequest::default_instance_ = new emptyRequest();
  emptyResponse::default_instance_ = new emptyResponse();
  emptyRequest::default_instance_->InitAsDefaultInstance();
  emptyResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_include_2fCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_include_2fCommon_2eproto {
  StaticDescriptorInitializer_include_2fCommon_2eproto() {
    protobuf_AddDesc_include_2fCommon_2eproto();
  }
} static_descriptor_initializer_include_2fCommon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

emptyRequest::emptyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emptyRequest::InitAsDefaultInstance() {
}

emptyRequest::emptyRequest(const emptyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emptyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emptyRequest::~emptyRequest() {
  SharedDtor();
}

void emptyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void emptyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emptyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emptyRequest_descriptor_;
}

const emptyRequest& emptyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_include_2fCommon_2eproto();
  return *default_instance_;
}

emptyRequest* emptyRequest::default_instance_ = NULL;

emptyRequest* emptyRequest::New() const {
  return new emptyRequest;
}

void emptyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emptyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void emptyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emptyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emptyRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emptyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emptyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emptyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emptyRequest::MergeFrom(const emptyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emptyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emptyRequest::CopyFrom(const emptyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emptyRequest::IsInitialized() const {

  return true;
}

void emptyRequest::Swap(emptyRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emptyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emptyRequest_descriptor_;
  metadata.reflection = emptyRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

emptyResponse::emptyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void emptyResponse::InitAsDefaultInstance() {
}

emptyResponse::emptyResponse(const emptyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void emptyResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

emptyResponse::~emptyResponse() {
  SharedDtor();
}

void emptyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void emptyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* emptyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return emptyResponse_descriptor_;
}

const emptyResponse& emptyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_include_2fCommon_2eproto();
  return *default_instance_;
}

emptyResponse* emptyResponse::default_instance_ = NULL;

emptyResponse* emptyResponse::New() const {
  return new emptyResponse;
}

void emptyResponse::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool emptyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void emptyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* emptyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int emptyResponse::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void emptyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const emptyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const emptyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void emptyResponse::MergeFrom(const emptyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void emptyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void emptyResponse::CopyFrom(const emptyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool emptyResponse::IsInitialized() const {

  return true;
}

void emptyResponse::Swap(emptyResponse* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata emptyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = emptyResponse_descriptor_;
  metadata.reflection = emptyResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbrpc
}  // namespace xtreemfs

// @@protoc_insertion_point(global_scope)
