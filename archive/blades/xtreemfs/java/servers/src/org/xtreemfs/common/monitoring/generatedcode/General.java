package org.xtreemfs.common.monitoring.generatedcode;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling XTREEMFS-MIB.
//

// java imports
//
import java.io.Serializable;

// jmx imports
//
import javax.management.MBeanServer;
import com.sun.management.snmp.SnmpString;
import com.sun.management.snmp.SnmpStatusException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;

/**
 * The class is used for implementing the "General" group.
 * The group is defined with the following oid: 1.3.6.1.4.1.38350.1.
 */
public class General implements GeneralMBean, Serializable {

    /**
     * Variable for storing the value of "NumPendingRequests".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.9".
     */
    protected Long NumPendingRequests = new Long(1);

    /**
     * Variable for storing the value of "NumClientConnections".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.8".
     */
    protected Integer NumClientConnections = new Integer(1);

    /**
     * Variable for storing the value of "DebugLevel".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.7".
     */
    protected Integer DebugLevel = new Integer(1);

    /**
     * Variable for storing the value of "TcpPort".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.6".
     */
    protected Integer TcpPort = new Integer(1);

    /**
     * Variable for storing the value of "DatabaseVersion".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.5".
     */
    protected String DatabaseVersion = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "RpcInterface".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.4".
     */
    protected Integer RpcInterface = new Integer(1);

    /**
     * Variable for storing the value of "ServiceUUID".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.13".
     */
    protected String ServiceUUID = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "ServiceType".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.12".
     */
    protected String ServiceType = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "JvmFreeMemory".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.3".
     */
    protected Long JvmFreeMemory = new Long(1);

    /**
     * Variable for storing the value of "JvmMaxMemory".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.2".
     */
    protected Long JvmMaxMemory = new Long(1);

    /**
     * Variable for storing the value of "IsRunning".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.11".
     */
    protected String IsRunning = new String("JDMK 5.1");

    /**
     * Variable for storing the value of "CurrentTime".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.10".
     */
    protected Long CurrentTime = new Long(1);

    /**
     * Variable for storing the value of "JvmUsedMemory".
     * The variable is identified by: "1.3.6.1.4.1.38350.1.1".
     */
    protected Long JvmUsedMemory = new Long(1);


    /**
     * Constructor for the "General" group.
     * If the group contains a table, the entries created through an SNMP SET will not be registered in Java DMK.
     */
    public General(SnmpMib myMib) {
    }


    /**
     * Constructor for the "General" group.
     * If the group contains a table, the entries created through an SNMP SET will be AUTOMATICALLY REGISTERED in Java DMK.
     */
    public General(SnmpMib myMib, MBeanServer server) {
    }

    /**
     * Getter for the "NumPendingRequests" variable.
     */
    public Long getNumPendingRequests() throws SnmpStatusException {
        return NumPendingRequests;
    }

    /**
     * Getter for the "NumClientConnections" variable.
     */
    public Integer getNumClientConnections() throws SnmpStatusException {
        return NumClientConnections;
    }

    /**
     * Getter for the "DebugLevel" variable.
     */
    public Integer getDebugLevel() throws SnmpStatusException {
        return DebugLevel;
    }

    /**
     * Getter for the "TcpPort" variable.
     */
    public Integer getTcpPort() throws SnmpStatusException {
        return TcpPort;
    }

    /**
     * Getter for the "DatabaseVersion" variable.
     */
    public String getDatabaseVersion() throws SnmpStatusException {
        return DatabaseVersion;
    }

    /**
     * Getter for the "RpcInterface" variable.
     */
    public Integer getRpcInterface() throws SnmpStatusException {
        return RpcInterface;
    }

    /**
     * Getter for the "ServiceUUID" variable.
     */
    public String getServiceUUID() throws SnmpStatusException {
        return ServiceUUID;
    }

    /**
     * Getter for the "ServiceType" variable.
     */
    public String getServiceType() throws SnmpStatusException {
        return ServiceType;
    }

    /**
     * Getter for the "JvmFreeMemory" variable.
     */
    public Long getJvmFreeMemory() throws SnmpStatusException {
        return JvmFreeMemory;
    }

    /**
     * Getter for the "JvmMaxMemory" variable.
     */
    public Long getJvmMaxMemory() throws SnmpStatusException {
        return JvmMaxMemory;
    }

    /**
     * Getter for the "IsRunning" variable.
     */
    public String getIsRunning() throws SnmpStatusException {
        return IsRunning;
    }

    /**
     * Getter for the "CurrentTime" variable.
     */
    public Long getCurrentTime() throws SnmpStatusException {
        return CurrentTime;
    }

    /**
     * Getter for the "JvmUsedMemory" variable.
     */
    public Long getJvmUsedMemory() throws SnmpStatusException {
        return JvmUsedMemory;
    }

}
