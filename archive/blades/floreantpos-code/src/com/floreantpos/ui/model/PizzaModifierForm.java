package com.floreantpos.ui.model;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Vector;

import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.AbstractTableModel;

import net.miginfocom.swing.MigLayout;

import com.floreantpos.Messages;
import com.floreantpos.model.MenuItemSize;
import com.floreantpos.model.MenuModifier;
import com.floreantpos.model.MenuModifierGroup;
import com.floreantpos.model.PizzaModifierPrice;
import com.floreantpos.model.Tax;
import com.floreantpos.model.dao.MenuItemSizeDAO;
import com.floreantpos.model.dao.MenuModifierDAO;
import com.floreantpos.model.dao.ModifierDAO;
import com.floreantpos.model.dao.ModifierGroupDAO;
import com.floreantpos.model.dao.TaxDAO;
import com.floreantpos.swing.BeanTableModel;
import com.floreantpos.swing.ComboBoxModel;
import com.floreantpos.swing.DoubleTextField;
import com.floreantpos.swing.FixedLengthTextField;
import com.floreantpos.swing.IntegerTextField;
import com.floreantpos.swing.MessageDialog;
import com.floreantpos.swing.PosUIManager;
import com.floreantpos.ui.BeanEditor;
import com.floreantpos.ui.dialog.BeanEditorDialog;
import com.floreantpos.ui.dialog.POSMessageDialog;
import com.floreantpos.util.POSUtil;

/**
 *
 * @author  MShahriar
 */
public class PizzaModifierForm extends BeanEditor {
	private MenuModifier modifier;
	private PriceByOrderType priceTableModel;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnNewTax;
	private javax.swing.JCheckBox btnPrintToKitchen;
	private javax.swing.JComboBox cbModifierGroup;
	private javax.swing.JComboBox cbTaxes;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JLabel jLabel6;
	private com.floreantpos.swing.TransparentPanel jPanel1, pricePanel;
	private javax.swing.JTabbedPane jTabbedPane1;
	private javax.swing.JFormattedTextField tfName;
	private JLabel lblTranslatedName;
	private FixedLengthTextField tfTranslatedName;
	private JButton btnButtonColor;
	private JButton btnTextColor;
	private IntegerTextField tfSortOrder;
	private JLabel lblSortOrder;

	private javax.swing.JTable priceTable;
	private javax.swing.JTable pizzaModifierPriceTable;
	private BeanTableModel<PizzaModifierPrice> pizzaModifierPriceTableModel;
	private javax.swing.JScrollPane pizzaModifierPriceTabScrollPane;

	private javax.swing.JButton btnNewPrice;
	private javax.swing.JButton btnUpdatePrice;
	private javax.swing.JButton btnDeletePrice;

	JLabel sizeLabel;
	JLabel priceLabel;
	JLabel extraPriceLabel;
	JComboBox cbSize;
	DoubleTextField tfPrice;
	DoubleTextField tfExtraPrice;

	private JButton btnAutoGenerate;

	// End of variables declaration//GEN-END:variables

	/** Creates new form ModifierEditor */
	public PizzaModifierForm() throws Exception {
		this(new MenuModifier());
	}

	public PizzaModifierForm(MenuModifier modifier) throws Exception {
		this.modifier = modifier;
		setLayout(new BorderLayout(0, 0));

		initComponents();

		ModifierGroupDAO modifierGroupDAO = new ModifierGroupDAO();
		List<MenuModifierGroup> groups = modifierGroupDAO.findAll();
		cbModifierGroup.setModel(new DefaultComboBoxModel(new Vector<MenuModifierGroup>(groups)));
		priceTable.setModel(priceTableModel = new PriceByOrderType(modifier.getProperties()));

		TaxDAO taxDAO = new TaxDAO();
		List<Tax> taxes = taxDAO.findAll();
		cbTaxes.setModel(new ComboBoxModel(taxes));
		btnPrintToKitchen = new javax.swing.JCheckBox();

		btnPrintToKitchen.setText(com.floreantpos.POSConstants.PRINT_TO_KITCHEN);
		btnPrintToKitchen.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
		btnPrintToKitchen.setMargin(new java.awt.Insets(0, 0, 0, 0));
		jPanel1.add(btnPrintToKitchen, "cell 1 7,alignx left,aligny top"); //$NON-NLS-1$

		add(jTabbedPane1);

		setBean(modifier);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
	private void initComponents() {

		jTabbedPane1 = new javax.swing.JTabbedPane();
		jPanel1 = new com.floreantpos.swing.TransparentPanel();
		pricePanel = new com.floreantpos.swing.TransparentPanel();
		jLabel1 = new javax.swing.JLabel();
		tfName = new javax.swing.JFormattedTextField();
		jLabel4 = new javax.swing.JLabel();
		cbModifierGroup = new javax.swing.JComboBox();

		priceTable = new javax.swing.JTable();

		btnNewPrice = new javax.swing.JButton();
		btnUpdatePrice = new javax.swing.JButton();
		btnDeletePrice = new javax.swing.JButton();
		btnAutoGenerate = new javax.swing.JButton();

		jLabel1.setText(com.floreantpos.POSConstants.NAME + ":");

		jLabel4.setText(com.floreantpos.POSConstants.GROUP + ":"); //$NON-NLS-1$

		jTabbedPane1.addTab(com.floreantpos.POSConstants.GENERAL, jPanel1);

		jPanel1.setLayout(new MigLayout("", "[80px][173px,grow][6px][49px][12px][][59px]", "[19px][][24px][19px][19px][][25px][][][15px]")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

		lblTranslatedName = new JLabel(Messages.getString("MenuModifierForm.0")); //$NON-NLS-1$
		jPanel1.add(lblTranslatedName, "cell 0 1,alignx trailing"); //$NON-NLS-1$

		tfTranslatedName = new FixedLengthTextField();
		jPanel1.add(tfTranslatedName, "cell 1 1 6 1,growx"); //$NON-NLS-1$

		lblSortOrder = new JLabel(Messages.getString("MenuModifierForm.15")); //$NON-NLS-1$
		jPanel1.add(lblSortOrder, "cell 0 3"); //$NON-NLS-1$

		tfSortOrder = new IntegerTextField();
		jPanel1.add(tfSortOrder, "cell 1 3,growx"); //$NON-NLS-1$
		jPanel1.add(jLabel1, "cell 0 0,alignx left,aligny center"); //$NON-NLS-1$
		jPanel1.add(jLabel4, "cell 0 2,alignx left,aligny center");
		jLabel5 = new javax.swing.JLabel();

		jLabel5.setText(com.floreantpos.POSConstants.TAX_RATE + ":");
		jPanel1.add(jLabel5, "cell 0 4,alignx left,aligny center"); //$NON-NLS-1$
		cbTaxes = new javax.swing.JComboBox();
		jPanel1.add(cbTaxes, "cell 1 4,growx,aligny top"); //$NON-NLS-1$
		btnNewTax = new javax.swing.JButton();

		btnNewTax.setText("..."); //$NON-NLS-1$
		btnNewTax.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnNewTaxActionPerformed(evt);
			}
		});
		jPanel1.add(btnNewTax, "cell 3 4,alignx left,aligny top"); //$NON-NLS-1$
		jLabel6 = new javax.swing.JLabel();

		jLabel6.setText("%");
		jPanel1.add(jLabel6, "cell 5 4,alignx left,aligny center");

		JLabel lblButtonColor = new JLabel(Messages.getString("MenuModifierForm.1")); //$NON-NLS-1$
		jPanel1.add(lblButtonColor, "cell 0 5"); //$NON-NLS-1$

		btnButtonColor = new JButton(""); //$NON-NLS-1$
		btnButtonColor.setPreferredSize(new Dimension(140, 40));
		jPanel1.add(btnButtonColor, "cell 1 5"); //$NON-NLS-1$

		btnButtonColor.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Color color = JColorChooser.showDialog(PizzaModifierForm.this, Messages.getString("MenuModifierForm.39"), btnButtonColor.getBackground()); //$NON-NLS-1$
				btnButtonColor.setBackground(color);
				btnTextColor.setBackground(color);
			}
		});

		JLabel lblTextColor = new JLabel(Messages.getString("MenuModifierForm.27")); //$NON-NLS-1$
		jPanel1.add(lblTextColor, "cell 0 6"); //$NON-NLS-1$

		btnTextColor = new JButton(Messages.getString("MenuModifierForm.29")); //$NON-NLS-1$
		btnTextColor.setPreferredSize(new Dimension(140, 40));
		jPanel1.add(btnTextColor, "cell 1 6"); //$NON-NLS-1$

		btnTextColor.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Color color = JColorChooser.showDialog(PizzaModifierForm.this, Messages.getString("MenuModifierForm.40"), btnTextColor.getForeground()); //$NON-NLS-1$
				btnTextColor.setForeground(color);
			}
		});
		jPanel1.add(tfName, "cell 1 0 6 1,growx,aligny top"); //$NON-NLS-1$
		jPanel1.add(cbModifierGroup, "cell 1 2 6 1,growx,aligny top"); //$NON-NLS-1$

		pizzaModifierPriceTable = new javax.swing.JTable();
		pizzaModifierPriceTable.setRowHeight(PosUIManager.getSize(pizzaModifierPriceTable.getRowHeight()));

		pizzaModifierPriceTableModel = new BeanTableModel<PizzaModifierPrice>(PizzaModifierPrice.class);
		pizzaModifierPriceTableModel.addColumn("SIZE", "size");
		pizzaModifierPriceTableModel.addColumn("PRICE", "price");
		pizzaModifierPriceTableModel.addColumn("EXTRA PRICE", "extraPrice");

		if (modifier != null) {
			List<PizzaModifierPrice> pizzaModifierPriceList = modifier.getPizzaModifierPriceList();
			pizzaModifierPriceTableModel.addRows(pizzaModifierPriceList);
		}
		pizzaModifierPriceTable.setModel(pizzaModifierPriceTableModel);
		pizzaModifierPriceTabScrollPane = new javax.swing.JScrollPane();
		pizzaModifierPriceTabScrollPane.setViewportView(pizzaModifierPriceTable);

		pricePanel.setLayout(new BorderLayout());
		pricePanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
		pricePanel.add(pizzaModifierPriceTabScrollPane, BorderLayout.CENTER);

		JPanel buttonPanel = new JPanel();

		buttonPanel.add(btnNewPrice);
		btnNewPrice.setText(Messages.getString("MenuModifierForm.2")); //$NON-NLS-1$
		btnNewPrice.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addModifierPrice();
			}

		});
		buttonPanel.add(btnUpdatePrice);
		btnUpdatePrice.setText("Edit"); //$NON-NLS-1$
		btnUpdatePrice.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				editSelectedRow();
			}

		});
		buttonPanel.add(btnDeletePrice);
		btnDeletePrice.setText("Delete"); //$NON-NLS-1$
		btnDeletePrice.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				deletePrice();
			}

		});

		buttonPanel.add(btnAutoGenerate);
		btnAutoGenerate.setText("Auto Generate"); //$NON-NLS-1$
		btnAutoGenerate.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				autoGenerateModifierPriceList();
			}

		});

		pricePanel.add(buttonPanel, BorderLayout.SOUTH);

		jTabbedPane1.addTab("Pizza Modifier Price ", pricePanel);

		pizzaModifierPriceTable.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseClicked(MouseEvent me) {
				if (me.getClickCount() == 2) {
					editSelectedRow();
				}
			}
		});

	}// </editor-fold>//GEN-END:initComponents

	private void btnNewTaxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTaxActionPerformed
		try {
			TaxForm editor = new TaxForm();
			BeanEditorDialog dialog = new BeanEditorDialog(editor);
			dialog.open();
			if (!dialog.isCanceled()) {
				Tax tax = (Tax) editor.getBean();
				ComboBoxModel model = (ComboBoxModel) cbTaxes.getModel();
				model.addElement(tax);
				model.setSelectedItem(tax);
			}
		} catch (Exception x) {
			MessageDialog.showError(com.floreantpos.POSConstants.ERROR_MESSAGE, x);
		}
	}//GEN-LAST:event_btnNewTaxActionPerformed

	@Override
	public boolean save() {
		try {
			if (!updateModel())
				return false;

			MenuModifier modifier = (MenuModifier) getBean();
			ModifierDAO dao = new ModifierDAO();
			dao.saveOrUpdate(modifier);
		} catch (Exception e) {
			MessageDialog.showError(com.floreantpos.POSConstants.SAVE_ERROR, e);
			return false;
		}
		return true;
	}

	@Override
	protected void updateView() {
		MenuModifier modifier = (MenuModifier) getBean();

		if (modifier == null) {
			tfName.setText(""); //$NON-NLS-1$

			return;
		}

		tfName.setText(modifier.getName());
		tfTranslatedName.setText(modifier.getTranslatedName());
		cbModifierGroup.setSelectedItem(modifier.getModifierGroup());
		btnPrintToKitchen.setSelected(modifier.isShouldPrintToKitchen());

		if (modifier.getSortOrder() != null) {
			tfSortOrder.setText(modifier.getSortOrder().toString());
		}

		if (modifier.getButtonColor() != null) {
			Color color = new Color(modifier.getButtonColor());
			btnButtonColor.setBackground(color);
			btnTextColor.setBackground(color);
		}

		if (modifier.getTextColor() != null) {
			Color color = new Color(modifier.getTextColor());
			btnTextColor.setForeground(color);
		}

		if (modifier.getTax() != null) {
			cbTaxes.setSelectedItem(modifier.getTax());
		}
	}

	@Override
	protected boolean updateModel() {
		MenuModifier modifier = (MenuModifier) getBean();

		String name = tfName.getText();
		if (POSUtil.isBlankOrNull(name)) {
			MessageDialog.showError(Messages.getString("MenuModifierForm.44")); //$NON-NLS-1$
			return false;
		}

		modifier.setName(name);

		List<PizzaModifierPrice> rows = pizzaModifierPriceTableModel.getRows();
		List<PizzaModifierPrice> pizzaModifierPriceList = modifier.getPizzaModifierPriceList();
		if (pizzaModifierPriceList != null) {
			pizzaModifierPriceList.clear();
		}
		for (PizzaModifierPrice pizzaModifierPrice : rows) {
			modifier.addTopizzaModifierPriceList(pizzaModifierPrice);
		}

		modifier.setTax((Tax) cbTaxes.getSelectedItem());
		modifier.setModifierGroup((MenuModifierGroup) cbModifierGroup.getSelectedItem());
		modifier.setShouldPrintToKitchen(Boolean.valueOf(btnPrintToKitchen.isSelected()));

		modifier.setTranslatedName(tfTranslatedName.getText());
		modifier.setButtonColor(btnButtonColor.getBackground().getRGB());
		modifier.setTextColor(btnTextColor.getForeground().getRGB());
		modifier.setSortOrder(tfSortOrder.getInteger());
		modifier.setPizzaModifier(true);

		return true;
	}

	class PriceByOrderType extends AbstractTableModel {
		List<String> propertiesKey = new ArrayList<String>();

		String[] cn = { "MODIFIER", "ORDER TYPE", "PRICE", "TAX", "EXTRA PRICE", "EXTRA TAX" }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$

		PriceByOrderType(Map<String, String> properties) {

			if (properties != null) {
				List<String> keys = new ArrayList(properties.keySet());
				setPropertiesToTable(keys);
			}
		}

		private void setPropertiesToTable(List<String> keys) {
			propertiesKey.clear();

			for (int i = 0; i < keys.size(); i++) {
				if (keys.get(i).contains("_PRICE") && !keys.get(i).contains("EXTRA_PRICE")) { //$NON-NLS-1$
					this.propertiesKey.add(keys.get(i));
				}
			}
		}

		public String get(int index) {
			return propertiesKey.get(index);
		}

		public void add(MenuModifier modifier) {
			setPropertiesToTable(new ArrayList(modifier.getProperties().keySet()));
			fireTableDataChanged();
		}

		public void setDefaultValue() {
			int selectedRow = priceTable.getSelectedRow();
			if (selectedRow == -1) {
				POSMessageDialog.showMessage(Messages.getString("MenuModifierForm.9")); //$NON-NLS-1$
				return;
			}
			String modifiedKey = priceTableModel.propertiesKey.get(selectedRow);
			modifiedKey = modifiedKey.replaceAll("_PRICE", ""); //$NON-NLS-1$ //$NON-NLS-2$
			modifiedKey = modifiedKey.replaceAll("_", " ");//$NON-NLS-1$ //$NON-NLS-2$
			modifier.setPriceByOrderType(modifiedKey, modifier.getPrice());
			if (modifier.getTax() != null) {
				modifier.setTaxByOrderType(modifiedKey, modifier.getTax().getRate());
			}
			else {
				modifier.setTaxByOrderType(modifiedKey, 0.0);
			}
			MenuModifierDAO.getInstance().saveOrUpdate(modifier);
			add(modifier);
			fireTableDataChanged();
		}

		public void remove(int index) {
			if (propertiesKey == null) {
				return;
			}
			String typeProperty = propertiesKey.get(index);
			String taxProperty = typeProperty.replaceAll("_PRICE", "_TAX"); //$NON-NLS-1$ //$NON-NLS-2$

			modifier.removeProperty(typeProperty, taxProperty);
			MenuModifierDAO.getInstance().saveOrUpdate(modifier);

			propertiesKey.remove(index);
			fireTableDataChanged();
		}

		public void removeAll() {
			modifier.getProperties().clear();
			MenuModifierDAO.getInstance().saveOrUpdate(modifier);
			propertiesKey.clear();
			fireTableDataChanged();
		}

		public int getRowCount() {
			if (propertiesKey == null)
				return 0;

			return propertiesKey.size();
		}

		public int getColumnCount() {
			return cn.length;
		}

		@Override
		public String getColumnName(int column) {
			return cn[column];
		}

		public List<String> getProperties() {
			return propertiesKey;
		}

		public Object getValueAt(int rowIndex, int columnIndex) {
			String key = String.valueOf(propertiesKey.get(rowIndex));
			switch (columnIndex) {
				case 0:
					return modifier.getName();
				case 1:
					key = key.replaceAll("_PRICE", ""); //$NON-NLS-1$ //$NON-NLS-2$
					key = key.replaceAll("_", " "); //$NON-NLS-1$ //$NON-NLS-2$
					return key;
				case 2:
					return modifier.getProperty(key);
				case 3:
					key = key.replaceAll("_PRICE", "_TAX"); //$NON-NLS-1$ //$NON-NLS-2$
					return modifier.getProperty(key);
				case 4:
					key = key.replaceAll("_PRICE", "_EXTRA_PRICE"); //$NON-NLS-1$ //$NON-NLS-2$
					return modifier.getProperty(key);
				case 5:
					key = key.replaceAll("_PRICE", "_EXTRA_TAX"); //$NON-NLS-1$ //$NON-NLS-2$
					return modifier.getProperty(key);
			}
			return null;
		}
	}

	public String getDisplayText() {
		MenuModifier modifier = (MenuModifier) getBean();
		if (modifier.getId() == null) {
			return Messages.getString("MenuModifierForm.45"); //$NON-NLS-1$
		}
		return Messages.getString("MenuModifierForm.46"); //$NON-NLS-1$
	}

	private void deletePrice() {
		int selectedRow = pizzaModifierPriceTable.getSelectedRow();
		if (selectedRow == -1) {
			POSMessageDialog.showMessage(this.getParentFrame(), Messages.getString("MenuModifierForm.7")); //$NON-NLS-1$
			return;
		}
		int option = POSMessageDialog.showYesNoQuestionDialog(this.getParentFrame(),
				Messages.getString("MenuModifierForm.21"), Messages.getString("MenuModifierForm.22")); //$NON-NLS-1$ //$NON-NLS-2$
		if (option != JOptionPane.YES_OPTION) {
			return;
		}

		pizzaModifierPriceTableModel.removeRow(selectedRow);
	}

	private void editSelectedRow() {
		int selectedRow = pizzaModifierPriceTable.getSelectedRow();
		if (selectedRow == -1) {
			POSMessageDialog.showMessage(this.getParentFrame(), Messages.getString("MenuModifierForm.25")); //$NON-NLS-1$
			return;
		}

		PizzaModifierPrice pizzaModifierPrice = pizzaModifierPriceTableModel.getRow(selectedRow);
		PizzaModifierPriceDialog dialog = new PizzaModifierPriceDialog(this.getParentFrame(), pizzaModifierPrice, pizzaModifierPriceTableModel.getRows());
		dialog.setTitle("Modifier Price ");
		dialog.setSize(PosUIManager.getSize(300, 200));
		dialog.open();
		if (!dialog.isCanceled()) {
			pizzaModifierPriceTableModel.fireTableRowsUpdated(selectedRow, selectedRow);
		}
	}

	private void addModifierPrice() {
		PizzaModifierPriceDialog dialog = new PizzaModifierPriceDialog(this.getParentFrame(), null, pizzaModifierPriceTableModel.getRows());
		dialog.setTitle("Modifier Price ");
		dialog.setSize(PosUIManager.getSize(300, 200));
		dialog.open();
		if (dialog.isCanceled()) {
			return;
		}
		PizzaModifierPrice pizzaPrice = dialog.getModifierPrice();
		pizzaModifierPriceTableModel.addRow(pizzaPrice);
	}

	private void autoGenerateModifierPriceList() {
		List<PizzaModifierPrice> pizzaModifierPriceList = generatePossibleModifierPriceList();

		filterDuplicateModifierPrices(pizzaModifierPriceList);

		pizzaModifierPriceTableModel.addRows(pizzaModifierPriceList);
		pizzaModifierPriceTable.repaint();

	}

	private List<PizzaModifierPrice> generatePossibleModifierPriceList() {
		List<MenuItemSize> menuItemSizeList = MenuItemSizeDAO.getInstance().findAll();
		List<PizzaModifierPrice> pizzaModifierPriceList = new ArrayList<PizzaModifierPrice>();

		for (int i = 0; i < menuItemSizeList.size(); ++i) {
			PizzaModifierPrice pizzaModifierPrice = new PizzaModifierPrice();
			pizzaModifierPrice.setSize(menuItemSizeList.get(i));
			pizzaModifierPrice.setPrice(0.0);
			pizzaModifierPrice.setExtraPrice(0.0);

			pizzaModifierPriceList.add(pizzaModifierPrice);
		}
		return pizzaModifierPriceList;
	}

	private void filterDuplicateModifierPrices(List<PizzaModifierPrice> pizzaModifierPriceList) {
		List<PizzaModifierPrice> existedPizzaModifierPriceValueList = pizzaModifierPriceTableModel.getRows();
		if (existedPizzaModifierPriceValueList != null) {

			for (Iterator iterator = existedPizzaModifierPriceValueList.iterator(); iterator.hasNext();) {
				PizzaModifierPrice existingPizzaModifierPrice = (PizzaModifierPrice) iterator.next();

				for (Iterator iterator2 = pizzaModifierPriceList.iterator(); iterator2.hasNext();) {
					PizzaModifierPrice pizzaModifierPrice = (PizzaModifierPrice) iterator2.next();
					if ((existingPizzaModifierPrice.getSize().equals(pizzaModifierPrice.getSize()))) {
						iterator2.remove();
					}
				}
			}
		}
	}
}
