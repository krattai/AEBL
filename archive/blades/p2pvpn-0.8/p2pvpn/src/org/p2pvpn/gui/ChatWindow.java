/*
    Copyright 2008, 2009 Wolfgang Ginolas

    This file is part of P2PVPN.

    P2PVPN is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.p2pvpn.gui;

import java.awt.event.KeyEvent;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.text.DateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import org.p2pvpn.network.ConnectionManager;
import org.p2pvpn.network.InternalPacketListener;
import org.p2pvpn.network.PeerID;
import org.p2pvpn.network.Router;

/**
 * This class implements the chat window, the user cen use to send messages to
 * other users.
 * @author Wolfgang Ginolas
 */
public class ChatWindow extends javax.swing.JFrame implements InternalPacketListener {

	private MainWindow mainWindow;
	private MainControl mainControl;

    /** Creates new form ChatWindow
	 * @param mainWindow the MainWindow
	 * @param mainControl the MainControl
	 */
    public ChatWindow(MainWindow mainWindow, MainControl mainControl) {
        setLocationByPlatform(true);
		this.mainControl = mainControl;
		this.mainWindow = mainWindow;
        initComponents();
		try {
			URL url = InfoWindow.class.getClassLoader().getResource("resources/images/chat.png");
			setIconImage(new ImageIcon(url).getImage());
		} catch(Throwable e) {}
		txtMessages.setEditable(false);
		txtSend.requestFocus();
    }

	/**
	 * Called by MainWindow when the network has changed.
	 */
	void networkHasChanged() {
		ConnectionManager cm = mainControl.getConnectionManager();
		if (cm!=null) {
			Router r = cm.getRouter();
			if (r!=null) {
				r.addInternalPacketListener(Router.INTERNAL_PORT_CHAT, this);
			}
		}

	}


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();
        txtSend = new javax.swing.JTextField();

        setTitle("Chat");

        txtMessages.setColumns(20);
        txtMessages.setRows(5);
        jScrollPane1.setViewportView(txtMessages);

        txtSend.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSendKeyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(txtSend, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(txtSend, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

	private void txtSendKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSendKeyPressed
		// add your handling code here:
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			sendMessage();
		}
	}//GEN-LAST:event_txtSendKeyPressed

	/**
	 * Send the message the user entered to all other peers.
	 */
	private void sendMessage() {
		String msg = txtSend.getText();
		txtSend.setText("");
		try {
			byte[] fromb = mainControl.getConnectionManager().getLocalAddr().getId();
			byte[] msgb = msg.getBytes("UTF-8");
			byte[] packet = new byte[fromb.length + msgb.length];
			System.arraycopy(fromb, 0, packet, 0, fromb.length);
			System.arraycopy(msgb, 0, packet, fromb.length, msgb.length);

			ConnectionManager cm = mainControl.getConnectionManager();
			if (cm!=null) {
				Router r = cm.getRouter();
				if (r!=null) {
					r.sendInternalPacket(null, Router.INTERNAL_PORT_CHAT, packet);
				}
			}

			writeMessage(mainControl.nameForPeer(mainControl.getConnectionManager().getLocalAddr()), msg);
		} catch (UnsupportedEncodingException ex) {
				Logger.getLogger(ChatWindow.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Write a message into the TextArea
	 * @param name the name of the user
	 * @param msg the message
	 */
	private void writeMessage(String name, String msg) {
		String date = DateFormat.getTimeInstance(DateFormat.SHORT).format(new Date());
		String line = date+" "+name+": "+msg+"\n";
		if (!isVisible()) {
			if (mainControl.isPopupChat()) {
				setVisible(true);
			} else {
				mainWindow.setChatBla();
			}
		}
		try {
			txtMessages.getDocument().insertString(txtMessages.getDocument().getLength(), line, null);
			txtMessages.setCaretPosition(txtMessages.getDocument().getLength());
		} catch (BadLocationException ex) {
			//Logger.getLogger("").log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * Called by the router, when a chat message is received.
	 * @param router the Router
	 * @param internalPort the internel port
	 * @param data the data
	 */
	public void receiveInternalPacket(Router router, byte internalPort, byte[] data) {
		byte[] fromb = new byte[PeerID.getIdLen()];
		byte[] msgb = new byte[data.length - PeerID.getIdLen()];
		System.arraycopy(data, 0, fromb, 0, fromb.length);
		System.arraycopy(data, fromb.length, msgb, 0, msgb.length);

		PeerID from = new PeerID(fromb, false);
		String msg;
		try {
			msg = new String(msgb, "UTF-8");
			SwingUtilities.invokeLater(new ThreadsaveWriteMessage(mainControl.nameForPeer(from), msg));
		} catch (UnsupportedEncodingException ex) {
			Logger.getLogger("").log(Level.SEVERE, null, ex);
		}
	}

	/**
	 * This class is used to write a message in the TextArea in a
	 * threadsafe way.
	 */
	private class ThreadsaveWriteMessage implements Runnable {
		private String name;
		private String msg;

		public ThreadsaveWriteMessage(String name, String msg) {
			this.name = name;
			this.msg = msg;
		}

		public void run() {
			writeMessage(name, msg);
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtMessages;
    private javax.swing.JTextField txtSend;
    // End of variables declaration//GEN-END:variables

}
