/*
    Copyright 2008, 2009 Wolfgang Ginolas

    This file is part of P2PVPN.

    P2PVPN is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.p2pvpn.gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.security.PublicKey;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.p2pvpn.tools.AdvProperties;
import org.p2pvpn.tools.CryptoUtils;

/**
 * This class implements the window which is opened, when the user
 * wants ti acceppt an invitation.
 *
 * @author Wolfgang Ginolas
 */
public class AcceptWindow extends javax.swing.JDialog implements DocumentListener {

	MainControl mainControl;
	JFileChooser fileChooser;
	
    /** Creates new form AcceptWindow
	 * @param parent the parent window
	 * @param mainControl the MainControl object
	 */
    public AcceptWindow(java.awt.Frame parent, MainControl mainControl) {
        super(parent, true);
       	setLocationByPlatform(true);
        initComponents();
		try {
			URL url = InfoWindow.class.getClassLoader().getResource("resources/images/accept.png");
			setIconImage(new ImageIcon(url).getImage());
		} catch(Throwable e) {}
		this.mainControl = mainControl;
		fileChooser = new JFileChooser();
		txtInvitation.getDocument().addDocumentListener(this);
		btnOK.setEnabled(false);

		JPopupMenu menu = new JPopupMenu();
		JMenuItem mitem = new JMenuItem("Paste");
		mitem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				paste();
			}
		});
		menu.add(mitem);
		txtInvitation.setComponentPopupMenu(menu);
    }

	/**
	 * Copy the text in the clipbord into the TextArea.
	 */
	private void paste() {
		Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
		boolean hasText = c!=null && c.isDataFlavorAvailable(DataFlavor.stringFlavor);
		if (hasText) {
			try {
				txtInvitation.setText((String) c.getData(DataFlavor.stringFlavor));
			} catch (UnsupportedFlavorException ex) {
				Logger.getLogger("").log(Level.WARNING, null, ex);
			} catch (IOException ex) {
				Logger.getLogger("").log(Level.WARNING, null, ex);
			}
		}
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scrollInvitation = new javax.swing.JScrollPane();
        txtInvitation = new javax.swing.JTextArea();
        btnLoad = new javax.swing.JButton();

        setTitle("Accept an Invitation");

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Invitation"));

        txtInvitation.setColumns(20);
        txtInvitation.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        txtInvitation.setRows(5);
        scrollInvitation.setViewportView(txtInvitation);

        btnLoad.setText("Load from File...");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(btnLoad)
                .addContainerGap())
            .add(scrollInvitation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(btnLoad)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scrollInvitation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(304, Short.MAX_VALUE)
                .add(btnOK)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnCancel)
                .addContainerGap())
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(btnCancel)
                    .add(btnOK))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
	setVisible(false);
}//GEN-LAST:event_btnCancelActionPerformed

/**
 * Accept an invitation.
 */
private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
	AdvProperties inv = new AdvProperties(txtInvitation.getText());
	AdvProperties[] ps = MainControl.calcNetworkAccess(inv);
	mainControl.connectToNewNet(ps[0], ps[1]);
	setVisible(false);
}//GEN-LAST:event_btnOKActionPerformed

/**
 * Load an invitation from a file.
 */
private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
	if (JFileChooser.APPROVE_OPTION == fileChooser.showOpenDialog(this)) {
		try {
			File file = fileChooser.getSelectedFile();
			FileInputStream in = new FileInputStream(file);
			
			AdvProperties p = new AdvProperties();
			p.load(in);
			txtInvitation.setText(p.toString(null, true, true));
		} catch (IOException iOException) {
			Logger.getLogger("").log(Level.WARNING, null, iOException);
			JOptionPane.showMessageDialog(null, iOException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
	}
}//GEN-LAST:event_btnLoadActionPerformed

	/**
	 * invChanged is called, when the invitation text changed.
	 */
	private void invChanged() {
		try {
			AdvProperties p = new AdvProperties(txtInvitation.getText());
			AdvProperties net = p.filter("network", false);
			
			PublicKey netKey = CryptoUtils.decodeRSAPublicKey(p.getPropertyBytes("network.publicKey", null));
			btnOK.setEnabled(net.verify("network.signature", netKey));
		} catch (NullPointerException e) {
			btnOK.setEnabled(false);
		}
	}

	public void insertUpdate(DocumentEvent e) {
		invChanged();
	}

	public void removeUpdate(DocumentEvent e) {
		invChanged();
	}

	public void changedUpdate(DocumentEvent e) {
		invChanged();
	}



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane scrollInvitation;
    private javax.swing.JTextArea txtInvitation;
    // End of variables declaration//GEN-END:variables

}
