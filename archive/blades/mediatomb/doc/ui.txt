MediaTomb - User Interface

   This documentation is valid for MediaTomb version 0.12.1.

   Copyright (c) 2005 Gena Batsyan, Sergey Bostandzhyan

   Copyright (c) 2006-2010 Gena Batsyan, Sergey Bostandzhyan,
   Leonhard Wimmer

   THIS SOFTWARE COMES WITH ABSOLUTELY NO WARRANTY! USE AT YOUR
   OWN RISK!
     __________________________________________________________

   Table of Contents

   1. Introduction
   2. Icon Reference

        2.1. Database View
        2.2. Filesystem View
        2.3. UI Status

1. Introduction

   MediaTomb comes with an AJAX driven web user interface that
   allows to add or remove media from the database and modify
   properties of media items. It also provides the means of
   selecting various Autoscan options. The UI is constantly
   improving, our goal is to offer a wide range of features to
   allow the user to easily control the server.

   Note:
          the link to the Web UI is printed upon server startup in
          the console. Consult the main docs for more information.

2. Icon Reference

   Here is a list of icons used in the MediaTomb UI.

2.1. Database View

   The database view presents the content that was added to the
   servers database - this is the hierarchy that will be served to
   UPnP devices.

2.1.1.  [document-new.png] Create New Object

   Manually creates a new object in the database.

   An object type can be selected from the drop down list and is
   one of the following:
     *
Container

       A container, that can hold other containers or items.
       Allowed settings:
          +
Title

            Title of the container as it will appear in the UI or
            as it will be presented to UPnP devices.
          +
Class

            UPnP class of the container, leave the default setting
            if you are unsure.
     *
Item

       A media item, typically an audio, photo or video file that
       resides on the servers local file system.
       Allowed settings:
          +
Title

            Title of the item as it will appear in the UI or as it
            will be presented to UPnP devices, this can be
            anything and does not have to be the actual file name.
          +
Location

            The location of the file on disk, must be given by an
            absolute path.
          +
Class

            UPnP class of the container, leave the default setting
            if you are unsure.
          +
Description

            Free text describing the item, it may be shown on the
            UPnP device depending on its implementation and
            capabilities.
          +
Mimetype

            This identifies the mime type of the media and is
            probably one of the most important fields - this will
            tell your device what kind of file it is dealing with.
            If you are unsure, use the file utility to retrieve
            the mime type information, type the following in a
            console (this example uses a jpg image):
file -i /opt/media/photos/key70113.jpg

            The output from the file utility will be something
            like:
/opt/media/photos/key70113.jpg: image/jpeg

            For the example above you would have to enter
            image/jpeg in the Mimetype field.
     *
Active Item

       Active Item is an experimental feature, it allows you to
       execute a script or a program on the server when this item
       is being downloaded - or "triggered". Refer to the Active
       Item documentation for more information.
          +
Title

            Title of the item as it will appear in the UI or as it
            will be presented to UPnP devices, this can be
            anything and does not have to be the actual file name.
          +
Location

            The location of the file on disk, must be given by an
            absolute path.
          +
Class

            UPnP class of the container, leave the default setting
            if you are unsure.
          +
Description

            Free text describing the item, it may be shown on the
            UPnP device depending on its implementation and
            capabilities.
          +
Mimetype

            This identifies the mime type of the media and is
            probably one of the most important fields - this will
            tell your device what kind of file it is dealing with.
          +
Action Script

            Location of the Action Script, take a look at an
            example script demo_toggle.py in the mediatomb/scripts
            directory.
          +
State

            Arbitrary string, identifying the current state of the
            Active Item. It is made available to the script and
            allows the script to decide which action to take (for
            example when implementing "ON" - "OFF" switches).
     *
External Link (URL)

       An online stream or file, located somewhere on the web.
       Allowed settings:
          +
Title

            Title of the item as it will appear in the UI or as it
            will be presented to UPnP devices, this can be
            anything and does not have to be the actual file name.
          +
URL

            The URL to the stream, for example
            http://www.deadlock.dhs.org/192/Deadlock_Veteran.04.Uz
            nik.mp3
          +
Protocol

            Usually http-get will be fine, but you can specify
            settings for rtsp and other streaming protocols
            depending on the presentation of the online content.
          +
Class

            UPnP class of the container, leave the default setting
            if you are unsure.
          +
Description

            Free text describing the item, it may be shown on the
            UPnP device depending on its implementation and
            capabilities.
          +
Mimetype

            This identifies the mime type of the media and is
            probably one of the most important fields - this will
            tell your device what kind of file it is dealing with.
     *
Internal Link (Local URL)

       A media item, typically an audio, photo or video file that
       resides in the servedir as defined in the servers
       configuration file, see main documentation for an example.
       Allowed settings:
          +
Title

            Title of the item as it will appear in the UI or as it
            will be presented to UPnP devices, this can be
            anything and does not have to be the actual file name.
          +
URL

            The location of the file on disk, relative to the
            servedir entry.
          +
Class

            UPnP class of the container, leave the default setting
            if you are unsure.
          +
Description

            Free text describing the item, it may be shown on the
            UPnP device depending on its implementation and
            capabilities.
          +
Mimetype

            This identifies the mime type of the media and is
            probably one of the most important fields - this will
            tell your device what kind of file it is dealing with.

2.1.2.  [stock_edit.png] Edit Object

   Allows to edit various object properties. The available fields
   vary, depending on the type of the object but will be generally
   the same as described above.

   Note:
          you can not modify the title and the location of objects
          in the PC-Directory because it is a special container
          that must guarantee a 1:1 mapping to the file system.

   Note:
          by editing object properties you do not change the
          original file on your drive (i.e. you do not modify any
          id3 or other information), the properties are edited in
          the MediaTomb database.

2.1.3.  [remove_this.png] Remove This

   Removes the object from the database. This icon is available
   for virtual items (items that were created by the import
   script) and also for icons in PC Directory. When used on a
   virtual item it will only remove the current reference, but it
   will keep the original object in PC-Directory. When used on an
   item in PC-Directory it will remove the item and all it's
   references.

   Note:
          the remove feature does not touch the files on your
          drive, the remove operation is only performed in the
          MediaTomb database.

2.1.4.  [remove_all.png] Remove Linked

   Removes the object and all its references from the database.
   This icon is only available for virtual items, not only will it
   erase the current reference, but it will also remove the
   original item in the PC-Directory container and all associated
   items.

   Note:
          the remove feature does not touch the files on your
          drive, the remove operation is only performed in the
          MediaTomb database.

2.1.5.  [add_as_autoscan.png] Set Autoscan Properties

   You can use the autoscan feature to monitor data in a certain
   directory, changes will be periodically synced with the
   database.

   In the database view this icon is only available for containers
   in the PC-Directory. Here are the possible settings:
     *
Scan Mode

       Defines the autoscan mode, can be one of the following:
          +
None

            The directory is not being autoscanned.
          +
Timed

            Enable timed rescans. The directory will be rescanned
            in intervals specified below.
          +
Inotify

            Enable filesystem event based rescans - this is only
            available when MediaTomb was compiled with the inotify
            feature.
     *
Scan Level

       Defines the autoscan type, can be one of the following:
          +
Basic

            The "Basic" autoscan type will only keep track if
            files have been added to or have been removed from the
            monitored directory. It will not detect changes inside
            the files, i.e. if you modify an id3 tag of your MP3,
            the metadata in the database will not be updated.
          +
Full

            The "Full" autoscan type will not only keep track of
            deleted or newly added files, but it will also watch
            the modification times and re add the media if it
            detects any changes. This might be useful if you
            updated the id3 information of an mp3 file or exif
            information of an image file.
     *
Recursive

       Operate recursively, also monitoring files in
       subdirectories.
     *
Include hidden files/directories

       Process or ignore hidden files and directories, i.e. those
       starting with a dot.
     *
Scan Interval

       Interval in seconds, the directory will be rescanned in
       given intervals.

        Note:
                the countdown for the next rescan starts only
                after the current scan is complete.

2.1.6.  [autoscan_inotify_folder_open.png] Inotify Autoscan Container

   Identifies an autoscan container of the Inotify scan type.

2.1.7.  [autoscan_inotify_config_folder_open.png] Persistent Inotify
Autoscan Container

   Identifies an autoscan container of the Inotify scan type that
   was setup via the server configuratoin file. It is treated as
   persistent and can not be removed in the UI.

2.1.8.  [autoscan_timed_folder_open.png] Timed Autoscan Container

   Identifies an autoscan container of the Timed scan type.

2.1.9.  [autoscan_timed_config_folder_open.png] Persistent Timed
Autoscan Container

   Identifies an autoscan container of the Timed scan type that
   was setup via the server configuratoin file. It is treated as
   persistent and can not be removed in the UI.

2.2. Filesystem View

   The Filesystem View allows you to browse the contents of your
   harddrive and add media to the severs database.

2.2.1.  [stock-add.png] Add File or Directory

   Adds a file or directory to the servers database, use this to
   make your media available to UPnP devices.

2.2.2.  [add_as_autoscan.png] Set Autoscan Properties

   Same as Section 2.1.5, " [add_as_autoscan.png] Set Autoscan
   Properties"

2.3. UI Status

2.3.1.  [status_loading.png] Loading

   Red eyes indicate that the UI is currently loading
   data/building up the tree structure.

2.3.2.  [status_updates_pending.png] Updates Pending

   Orange eyes indicate that the database has changed and that the
   UI needs to be updated in order to reflect those changes. The
   update will usually take place after a certain timeout, which
   depends on your actions. If you are constantly navigating, the
   update will be delayed further to prevent the case that the
   tree gets updated during navigation - this would be very
   annoying. You can skip the timeout and cause an immediate
   update by clicking on the skull icon.
