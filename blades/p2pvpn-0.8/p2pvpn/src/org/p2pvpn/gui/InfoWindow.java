/*
    Copyright 2008, 2009 Wolfgang Ginolas

    This file is part of P2PVPN.

    P2PVPN is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/


package org.p2pvpn.gui;

import java.awt.BorderLayout;
import java.net.URL;
import java.util.Map;

import java.util.logging.Handler;
import java.util.logging.LogRecord;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.text.Document;
import org.p2pvpn.network.PeerID;
import org.p2pvpn.network.ConnectionManager;
import org.p2pvpn.network.Router;
import org.p2pvpn.network.RoutungTableListener;
import org.p2pvpn.network.UPnPPortForward;
import org.p2pvpn.network.UPnPPortForwardListener;

/**
 * This is an information window which shows many informations about the
 * current status od P2PVPN.
 * @author Wolfgang Ginolas
 */
public class InfoWindow extends javax.swing.JFrame implements RoutungTableListener, UPnPPortForwardListener {

	private static final int MAX_LOG_LEN = 10*1000; // the max length of the log TextArea
	
	private ConnectionManager connectionManager;
    private MainControl mainControl;
	private PeerID addrShown = null;

	private PeerGraph peerGraph;
	
	/** Creates new form Main
	 * @param mainControl the MainControl
	 */
    public InfoWindow(MainControl mainControl) {
        this.mainControl = mainControl;
        this.connectionManager = null;
    	setLocationByPlatform(true);
    	
        initComponents();
		
		peerGraph = new PeerGraph();
		pnlPeerGraph.setLayout(new BorderLayout());
		pnlPeerGraph.add(peerGraph);

        peerTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent e) {
                for(int i=e.getFirstIndex(); i<=e.getLastIndex(); i++) {
                    if (peerTable1.getSelectionModel().isSelectedIndex(i)) {
                        peerSelected(i);
                        break;
                    }
                }
            }
        });
        try {
            URL url = InfoWindow.class.getClassLoader().getResource("resources/images/info.png");
            setIconImage(new ImageIcon(url).getImage());
        } catch(Throwable e) {}
        startLogging();
    }

	/** Called by MainControl, when the network has changed.
	 */
    void networkHasChanged() {
        connectionManager = mainControl.getConnectionManager();
        if (connectionManager != null) {
            peerTable1.setModel(new PeerTableModel(connectionManager));
            ipTable.setModel(new IPTableModel(connectionManager));
            setLocalInfo(
                    "ID: "+connectionManager.getLocalAddr()+
                    "  Port: "+connectionManager.getServerPort());
            connectionManager.getRouter().addTableListener(InfoWindow.this);
            //connectionManager.getUPnPPortForward().addListener(Main.this);
        }
		peerGraph.setConnectionManager(connectionManager);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        peerInfo = new javax.swing.JTextArea();
        aPanel1 = new javax.swing.JPanel();
        connectBtn1 = new javax.swing.JButton();
        hostConnectText1 = new javax.swing.JTextField();
        localInfo1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        peerTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ipTable = new javax.swing.JTable();
        pnlPeerGraph = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        logText = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setTitle("P2PVPN");

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setContinuousLayout(true);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Info"));

        peerInfo.setColumns(20);
        peerInfo.setEditable(false);
        peerInfo.setRows(5);
        peerInfo.setText(" ");
        jScrollPane3.setViewportView(peerInfo);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(jPanel2);

        aPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Connections"));

        connectBtn1.setText("Connect To");
        connectBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventConnectTo(evt);
            }
        });

        hostConnectText1.setToolTipText("host:port");

        localInfo1.setText(" ");

        peerTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        peerTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(peerTable1);

        org.jdesktop.layout.GroupLayout aPanel1Layout = new org.jdesktop.layout.GroupLayout(aPanel1);
        aPanel1.setLayout(aPanel1Layout);
        aPanel1Layout.setHorizontalGroup(
            aPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(aPanel1Layout.createSequentialGroup()
                .add(aPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(aPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(localInfo1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE))
                    .add(aPanel1Layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(connectBtn1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(hostConnectText1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE))
                    .add(aPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)))
                .addContainerGap())
        );
        aPanel1Layout.setVerticalGroup(
            aPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, aPanel1Layout.createSequentialGroup()
                .add(localInfo1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(aPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(hostConnectText1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(connectBtn1))
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(aPanel1);

        jTabbedPane1.addTab("Connections", jSplitPane1);

        ipTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(ipTable);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Known IPs", jPanel1);

        org.jdesktop.layout.GroupLayout pnlPeerGraphLayout = new org.jdesktop.layout.GroupLayout(pnlPeerGraph);
        pnlPeerGraph.setLayout(pnlPeerGraphLayout);
        pnlPeerGraphLayout.setHorizontalGroup(
            pnlPeerGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 540, Short.MAX_VALUE)
        );
        pnlPeerGraphLayout.setVerticalGroup(
            pnlPeerGraphLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 445, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Peer Graph", pnlPeerGraph);

        logText.setColumns(20);
        logText.setRows(5);
        jScrollPane5.setViewportView(logText);

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Log", jPanel4);

        jLabel1.setFont(new java.awt.Font("DejaVu Sans", 0, 24));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("P2PVPN");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("0.7");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("11. July  2009");

        jLabel4.setText("<html>P2PVPN  Copyright (C) 2008, 2009 Wolfgang Ginolas<br>\nThis program comes with ABSOLUTELY NO WARRANTY;<br>\nThis is free software, and you are welcome to redistribute it<br>\nunder certain conditions.\n");

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                    .add(jLabel4))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel2)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel4)
                .addContainerGap(302, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("About", jPanel3);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 544, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void eventConnectTo(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventConnectTo
	connectionManager.connectTo(hostConnectText1.getText());
}//GEN-LAST:event_eventConnectTo

	/**
	 * Called, when the user selects a peer in the peer table. This
	 * will show the database of the selected peer.
	 * @param i the selected row
	 */
	private void peerSelected(int i) {
		if (i<0) {
			return;
		}
		
		addrShown = ((PeerTableModel)peerTable1.getModel()).getPeerID(i);
		tableChanged(null);
	}	

	/**
	 * Set information like the PeerID ant the local port which should be
	 * shown to the user.
	 * @param s the info
	 */
	public void setLocalInfo(String s) {
		localInfo1.setText(s);
	}

	/**
	 * Called, when the peer-table changes. This will update
	 * the database shown to the user.
	 * @param router
	 */
	public void tableChanged(Router router) {
		SwingUtilities.invokeLater(new Runnable() {
			public void run() {
				tableChangedSave();
			}
		});
	}

	/**
	 * Called, when the peer-table changes. This will update
	 * the database shown to the user.
	 */
	public void tableChangedSave() {
		StringBuffer info = new StringBuffer();
		info.append("Info for "+addrShown+"\n\n");
		Map<String, String> map = connectionManager.getRouter().getPeerInfo(addrShown);
		if (map==null) {
			peerInfo.setText("");
			return;
		}

		for(Map.Entry<String, String> e : map.entrySet()) {
			info.append(e.getKey()+"="+e.getValue()+"\n");
		}

		peerInfo.setText(info.toString());
	}

	public void upnpChanged(UPnPPortForward upnp) {
		/*
		InternetGatewayDevice igd = upnp.getIgd();
		if (igd!=null) {
			upnpText.setText("Internet Gateway Device: "+igd.getIGDRootDevice().getModelName()+"\n"+
					"External IP: "+upnp.getExternalIP()+"\n" +
					"Port mapped: "+upnp.isMapped()+"\n" +
					"Error: "+upnp.getError());
		} else {
			upnpText.setText("Internet Gateway Device: not found");
		}
		*/
	}

	/**
	 * Initialize the logging-tab.
	 */
	public void startLogging() {
		LoggingWriter lt = new LoggingWriter();
		lt.setFormatter(new SimpleFormatter());
		
		Logger.getLogger("").addHandler(lt);
	}

	/**
	 * A Logging-Handler which shows all log messages in the log-tab.
	 */
	class LoggingWriter extends Handler {

		public LoggingWriter() {
			super();
		}
		
		@Override
		public void publish(LogRecord r) {
			try {
				String s = getFormatter().format(r);
				Document d = logText.getDocument();
				d.insertString(d.getLength(), s, null);
				if (d.getLength() > MAX_LOG_LEN) {
					d.remove(0, d.getLength()/2);
				}
			} catch (Throwable ex) {
				ex.printStackTrace();
			}
		}

		@Override
		public void flush() {
		}

		@Override
		public void close() throws SecurityException {
		}
		

	}
	
	// TODO remove & rename variables
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel aPanel1;
    private javax.swing.JButton connectBtn1;
    private javax.swing.JTextField hostConnectText1;
    private javax.swing.JTable ipTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel localInfo1;
    private javax.swing.JTextArea logText;
    private javax.swing.JTextArea peerInfo;
    private javax.swing.JTable peerTable1;
    private javax.swing.JPanel pnlPeerGraph;
    // End of variables declaration//GEN-END:variables


    
}
