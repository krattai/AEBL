/*
    Copyright 2008, 2009 Wolfgang Ginolas

    This file is part of P2PVPN.

    P2PVPN is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Foobar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
*/

package org.p2pvpn.gui;

import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import org.p2pvpn.tools.AdvProperties;

/**
 * This window is shown, when the user wants to invite another persion.
 * @author Wolfgang Ginolas
 */
public class InviteWindow extends javax.swing.JDialog implements ClipboardOwner {

	MainControl mainControl;
	JFileChooser fileChooser;
	
    /** Creates new form InviteWindow
	 * @param parent the parent Frame
	 * @param mainControl the MainControl
	 */
    public InviteWindow(java.awt.Frame parent, MainControl mainControl) {
        super(parent, true);
        setLocationByPlatform(true);
        initComponents();
		try {
			URL url = InfoWindow.class.getClassLoader().getResource("resources/images/invite.png");
			setIconImage(new ImageIcon(url).getImage());
		} catch(Throwable e) {}
		fileChooser = new JFileChooser();
		this.mainControl = mainControl;

		JPopupMenu menu = new JPopupMenu();
		JMenuItem mitem = new JMenuItem("Copy");
		mitem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				copy();
			}
		});
		menu.add(mitem);
		txtInvitation.setComponentPopupMenu(menu);
    }

	/**
	 * Copy the invitation into the clipboard.
	 */
	private void copy() {
		Clipboard c = Toolkit.getDefaultToolkit().getSystemClipboard();
		c.setContents(new StringSelection(txtInvitation.getText()), this);
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpDate = new javax.swing.ButtonGroup();
        chkNetwork = new javax.swing.JCheckBox();
        btnGenerate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtInvitation = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        lblDate = new javax.swing.JLabel();
        spnExpiryDate = new javax.swing.JSpinner();
        lblNote = new javax.swing.JLabel();
        radNever = new javax.swing.JRadioButton();
        radDate = new javax.swing.JRadioButton();

        setTitle("Generate Invitation");

        chkNetwork.setText("Allow invitation of others");
        chkNetwork.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkNetworkItemStateChanged(evt);
            }
        });

        btnGenerate.setText("Generate Invitation");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Invitation"));

        txtInvitation.setColumns(20);
        txtInvitation.setFont(new java.awt.Font("DejaVu Sans", 0, 8));
        txtInvitation.setRows(5);
        jScrollPane1.setViewportView(txtInvitation);

        btnSave.setText("Save to a File...");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(btnSave)
                .addContainerGap())
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnSave))
        );

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        lblDate.setText("Date of expiry: ");

        spnExpiryDate.setModel(new javax.swing.SpinnerDateModel());

        lblNote.setText("Make sure to generate a new invitation for every person!");

        grpDate.add(radNever);
        radNever.setSelected(true);
        radNever.setText("Never");

        grpDate.add(radDate);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(chkNetwork)
                .addContainerGap(224, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(344, Short.MAX_VALUE)
                .add(btnClose)
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lblDate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(radDate)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(spnExpiryDate, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                    .add(radNever))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(lblNote)
                .addContainerGap(64, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(btnGenerate)
                .addContainerGap(268, Short.MAX_VALUE))
            .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(chkNetwork)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblDate)
                    .add(radNever))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(radDate)
                    .add(spnExpiryDate, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lblNote)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnGenerate)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnClose)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
	setVisible(false);
}//GEN-LAST:event_btnCloseActionPerformed

/**
 * Generate an invitation.
 */
private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
	AdvProperties netCfg = mainControl.getNetworkCfg();
	if (chkNetwork.isSelected()) {
		txtInvitation.setText(netCfg.toString(null, false, true));
	} else {
		Date date = null;
		if (radDate.isSelected()) {
			date = (Date)spnExpiryDate.getModel().getValue();
		}
		AdvProperties accessCfg = MainControl.genereteAccess(netCfg, date);
		txtInvitation.setText(accessCfg.toString(null, false, true));
	}
}//GEN-LAST:event_btnGenerateActionPerformed

/**
 * Save the invitation in a file
 */
private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
	if (JFileChooser.APPROVE_OPTION == fileChooser.showSaveDialog(this)) {
		try {
			File file = fileChooser.getSelectedFile();
			FileOutputStream out = new FileOutputStream(file);
			
			AdvProperties p = new AdvProperties(txtInvitation.getText());
			p.store(out, null);
			txtInvitation.setText(p.toString(null, true, true));
		} catch (IOException iOException) {
			Logger.getLogger("").log(Level.WARNING, null, iOException);
			JOptionPane.showMessageDialog(null, iOException.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
		}
	}	
}//GEN-LAST:event_btnSaveActionPerformed

private void chkNetworkItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkNetworkItemStateChanged
	// TODO add your handling code here:
	if (chkNetwork.isSelected()) {
		lblNote.setVisible(false);
		spnExpiryDate.setEnabled(false);
		lblDate.setEnabled(false);
		radNever.setEnabled(false);
		radDate.setEnabled(false);
	} else {
		lblNote.setVisible(true);
		spnExpiryDate.setEnabled(true);
		lblDate.setEnabled(true);
		radNever.setEnabled(true);
		radDate.setEnabled(true);
	}
}//GEN-LAST:event_chkNetworkItemStateChanged

	public void lostOwnership(Clipboard arg0, Transferable arg1) {
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkNetwork;
    private javax.swing.ButtonGroup grpDate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblNote;
    private javax.swing.JRadioButton radDate;
    private javax.swing.JRadioButton radNever;
    private javax.swing.JSpinner spnExpiryDate;
    private javax.swing.JTextArea txtInvitation;
    // End of variables declaration//GEN-END:variables


}
