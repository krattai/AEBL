--- Create threads and pass Context to it.
--
-- @module lzmq.threads


--- Create new thread.
-- This function create thread in suspended mode.
--
-- @tparam lzmq.context ctx ZMQ Context
-- @tparam [string|function] code if first char is '@' then this is filename else this is Lua chunk.
--            If code is function then it uses `string.dump` to serialize it.
-- @param ... arguments for thread
-- @treturn[1] thread new thread
-- @treturn[2] nil
-- @treturn[2] string error message
--
-- @usage
-- local thread = zthreads.run(ctx, function()
--   local ctx = require"lzmq.threads".context()
--   ...
-- end):start(true)
function run() end

--- Create new thread and pipe.
-- This function create thread in suspended mode.
-- 
-- @tparam lzmq.context ctx ZMQ Context
-- @tparam [string|function] code if first char is '@' then this is filename else this is Lua chunk.
--            If code is function then it uses `string.dump` to serialize it.
-- @param ... arguments for thread
-- @treturn[1] thread new thread
-- @treturn[1] lzmq.socket pipe
-- @treturn[2] nil
-- @treturn[2] lzmq.error error object
-- @treturn[3] nil
-- @treturn[3] string error message
--
-- @usage
-- local thread, pipe = zthreads.fork(ctx, function(pipe)
--   pipe:send("READY")
--   pipe:recv()
-- end)
-- thread:start()
-- 
-- pipe:recv()
-- pipe:send("START")
function fork() end

--- Create new arctor.
-- This function create thread in suspended mode.
-- `arctor` is object inherited from thread and zmq socket.
-- You can use it to communicate with thread (send/sendx/recv/recvx) and
-- to sync with thread (join).<br/>
-- You can also usage actor with zmq poller and zmq loop objects.<br/>
-- Child thread gets pipe socket same as in fork.
-- 
-- @tparam lzmq.context ctx ZMQ Context
-- @tparam [string|function] code if first char is '@' then this is filename else this is Lua chunk.
--            If code is function then it uses `string.dump` to serialize it.
-- @param ... arguments for thread
-- @treturn[1] arctor new actor
-- @treturn[2] nil
-- @treturn[2] lzmq.error error object
-- @treturn[3] nil
-- @treturn[3] string error message
--
-- @usage
-- local actor = zthreads.actor(ctx, function(pipe)
--   pipe:send("READY")
--   pipe:recv()
-- end):start()
-- 
-- actor:recv()
-- actor:send("START")
-- actor:join()
function actor() end

--- Create new thread.
-- This function is fully analog of `fork` function but always use globla context.
--
-- @tparam [string|function] code 
-- @param ... arguments
--
-- @see fork
-- @see context
--
-- @usage
-- local thread = zthreads.xrun(function()
--   local ctx = require"lzmq.threads".context()
--   ...
-- end):start(true)
function xrun() end

--- Create new thread and pipe.
-- This function is fully analog of `fork` function but always use globla context.
--
-- @tparam [string|function] code 
-- @param ... arguments
--
-- @see fork
-- @see context
--
-- @usage
-- local thread, pipe = zthreads.xfork(function(pipe)
--   pipe:send("READY")
--   pipe:recv()
-- end)
-- thread:start()
-- 
-- pipe:recv()
-- pipe:send("START")
function xfork() end

--- Create new arctor.
-- This function is fully analog of `actor` function but always use globla context.
--
-- @tparam [string|function] code 
-- @param ... arguments
--
-- @see actor
-- @see context
--
-- @usage
-- local actor = zthreads.xactor(function(pipe)
--   pipe:send("READY")
--   pipe:recv()
-- end):start()
-- 
-- actor:recv()
-- actor:send("START")
-- actor:join()
function xactor() end

--- Get context from parent thread.
-- For main thread this function can create new context and set it as parent context.
-- So you can use this function to get unique global zmq context.
-- If you lready have context in main thread then you can use `set_context` function
-- @treturn lzmq.context
function context() end

--- Set context as global for thread library.
-- This function raise error in case if context already set.
-- @tparam lzmq.context ctx
function set_context() end

--- Get context from parent thread.
-- This function is alias for `context` function
--
-- @treturn lzmq.context
function get_parent_ctx() end

--- ZMQ thread
-- @type thread
--

--- Resume thread.
--
-- Warning: If you don't call thread:join() on a joinable child thread, it will be called
-- by the garbage collector, which may cause random pauses/freeze of the parent thread.
--
-- @tparam[opt=true] bool detached start detached thread
-- @tparam[opt=true] bool joinable start joinable thread
-- @return true
function thread:start() end

--- Join to joinable thread.
--
-- @treturn ... return values from thread
function thread:join() end

--- Check if thread is working.
--
-- @treturn bool return true if thread is alive
function thread:alive() end

