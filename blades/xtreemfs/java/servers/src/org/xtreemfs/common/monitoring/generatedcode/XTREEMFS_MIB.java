package org.xtreemfs.common.monitoring.generatedcode;

//
// Generated by mibgen version 5.1 (03/08/07) when compiling XTREEMFS-MIB in standard metadata mode.
//

// java imports
//
import java.io.Serializable;
import java.util.Hashtable;

// jmx imports
//
import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.management.InstanceAlreadyExistsException;

// jdmk imports
//
import com.sun.management.snmp.agent.SnmpMib;
import com.sun.management.snmp.agent.SnmpMibNode;
import com.sun.management.snmp.agent.SnmpMibTable;
import com.sun.management.snmp.agent.SnmpStandardObjectServer;

/**
 * The class is used for representing "XTREEMFS-MIB".
 * You can edit the file if you want to modify the behavior of the MIB.
 */
public class XTREEMFS_MIB extends SnmpMib implements Serializable {

    /**
     * Default constructor. Initialize the Mib tree.
     */
    public XTREEMFS_MIB() {
        mibName = "XTREEMFS_MIB";
    }

    /**
     * Initialization of the MIB with no registration in Java DMK.
     */
    public void init() throws IllegalAccessException {
        // Allow only one initialization of the MIB.
        //
        if (isInitialized == true) {
            return ;
        }

        try  {
            populate(null, null);
        } catch(IllegalAccessException x)  {
            throw x;
        } catch(RuntimeException x)  {
            throw x;
        } catch(Exception x)  {
            throw new Error(x.getMessage());
        }

        isInitialized = true;
    }

    /**
     * Initialization of the MIB with AUTOMATIC REGISTRATION in Java DMK.
     */
    public ObjectName preRegister(MBeanServer server, ObjectName name)
            throws Exception {
        // Allow only one initialization of the MIB.
        //
        if (isInitialized == true) {
            throw new InstanceAlreadyExistsException();
        }

        // Initialize MBeanServer information.
        //
        this.server = server;

        populate(server, name);

        isInitialized = true;
        return name;
    }

    /**
     * Initialization of the MIB with no registration in Java DMK.
     */
    public void populate(MBeanServer server, ObjectName name) 
        throws Exception {
        // Allow only one initialization of the MIB.
        //
        if (isInitialized == true) {
            return ;
        }

        if (objectserver == null) 
            objectserver = new SnmpStandardObjectServer();

        // Initialization of the "Osd" group.
        // To disable support of this group, redefine the 
        // "createOsdMetaNode()" factory method, and make it return "null"
        //
        initOsd(server);

        // Initialization of the "Mrc" group.
        // To disable support of this group, redefine the 
        // "createMrcMetaNode()" factory method, and make it return "null"
        //
        initMrc(server);

        // Initialization of the "Dir" group.
        // To disable support of this group, redefine the 
        // "createDirMetaNode()" factory method, and make it return "null"
        //
        initDir(server);

        // Initialization of the "General" group.
        // To disable support of this group, redefine the 
        // "createGeneralMetaNode()" factory method, and make it return "null"
        //
        initGeneral(server);

        isInitialized = true;
    }


    // ------------------------------------------------------------
    // 
    // Initialization of the "Osd" group.
    // 
    // ------------------------------------------------------------


    /**
     * Initialization of the "Osd" group.
     * 
     * To disable support of this group, redefine the 
     * "createOsdMetaNode()" factory method, and make it return "null"
     * 
     * @param server    MBeanServer for this group (may be null)
     * 
     **/
    protected void initOsd(MBeanServer server) 
        throws Exception {
        final String oid = getGroupOid("Osd", "1.3.6.1.4.1.38350.4");
        ObjectName objname = null;
        if (server != null) {
            objname = getGroupObjectName("Osd", oid, mibName + ":name=org.xtreemfs.common.monitoring.generatedcode.Osd");
        }
        final OsdMeta meta = createOsdMetaNode("Osd", oid, objname, server);
        if (meta != null) {
            meta.registerTableNodes( this, server );

            // Note that when using standard metadata,
            // the returned object must implement the "OsdMBean"
            // interface.
            //
            final OsdMBean group = (OsdMBean) createOsdMBean("Osd", oid, objname, server);
            meta.setInstance( group );
            registerGroupNode("Osd", oid, objname, meta, group, server);
        }
    }


    /**
     * Factory method for "Osd" group metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param groupName Name of the group ("Osd")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "Osd" group (OsdMeta)
     * 
     **/
    protected OsdMeta createOsdMetaNode(String groupName,
                String groupOid, ObjectName groupObjname, MBeanServer server)  {
        return new OsdMeta(this, objectserver);
    }


    /**
     * Factory method for "Osd" group MBean.
     * 
     * You can redefine this method if you need to replace the default
     * generated MBean class with your own customized class.
     * 
     * @param groupName Name of the group ("Osd")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the MBean class generated for the
     *         "Osd" group (Osd)
     * 
     * Note that when using standard metadata,
     * the returned object must implement the "OsdMBean"
     * interface.
     **/
    protected Object createOsdMBean(String groupName,
                String groupOid,  ObjectName groupObjname, MBeanServer server)  {

        // Note that when using standard metadata,
        // the returned object must implement the "OsdMBean"
        // interface.
        //
        if (server != null) 
            return new Osd(this,server);
        else 
            return new Osd(this);
    }


    // ------------------------------------------------------------
    // 
    // Initialization of the "Mrc" group.
    // 
    // ------------------------------------------------------------


    /**
     * Initialization of the "Mrc" group.
     * 
     * To disable support of this group, redefine the 
     * "createMrcMetaNode()" factory method, and make it return "null"
     * 
     * @param server    MBeanServer for this group (may be null)
     * 
     **/
    protected void initMrc(MBeanServer server) 
        throws Exception {
        final String oid = getGroupOid("Mrc", "1.3.6.1.4.1.38350.3");
        ObjectName objname = null;
        if (server != null) {
            objname = getGroupObjectName("Mrc", oid, mibName + ":name=org.xtreemfs.common.monitoring.generatedcode.Mrc");
        }
        final MrcMeta meta = createMrcMetaNode("Mrc", oid, objname, server);
        if (meta != null) {
            meta.registerTableNodes( this, server );

            // Note that when using standard metadata,
            // the returned object must implement the "MrcMBean"
            // interface.
            //
            final MrcMBean group = (MrcMBean) createMrcMBean("Mrc", oid, objname, server);
            meta.setInstance( group );
            registerGroupNode("Mrc", oid, objname, meta, group, server);
        }
    }


    /**
     * Factory method for "Mrc" group metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param groupName Name of the group ("Mrc")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "Mrc" group (MrcMeta)
     * 
     **/
    protected MrcMeta createMrcMetaNode(String groupName,
                String groupOid, ObjectName groupObjname, MBeanServer server)  {
        return new MrcMeta(this, objectserver);
    }


    /**
     * Factory method for "Mrc" group MBean.
     * 
     * You can redefine this method if you need to replace the default
     * generated MBean class with your own customized class.
     * 
     * @param groupName Name of the group ("Mrc")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the MBean class generated for the
     *         "Mrc" group (Mrc)
     * 
     * Note that when using standard metadata,
     * the returned object must implement the "MrcMBean"
     * interface.
     **/
    protected Object createMrcMBean(String groupName,
                String groupOid,  ObjectName groupObjname, MBeanServer server)  {

        // Note that when using standard metadata,
        // the returned object must implement the "MrcMBean"
        // interface.
        //
        if (server != null) 
            return new Mrc(this,server);
        else 
            return new Mrc(this);
    }


    // ------------------------------------------------------------
    // 
    // Initialization of the "Dir" group.
    // 
    // ------------------------------------------------------------


    /**
     * Initialization of the "Dir" group.
     * 
     * To disable support of this group, redefine the 
     * "createDirMetaNode()" factory method, and make it return "null"
     * 
     * @param server    MBeanServer for this group (may be null)
     * 
     **/
    protected void initDir(MBeanServer server) 
        throws Exception {
        final String oid = getGroupOid("Dir", "1.3.6.1.4.1.38350.2");
        ObjectName objname = null;
        if (server != null) {
            objname = getGroupObjectName("Dir", oid, mibName + ":name=org.xtreemfs.common.monitoring.generatedcode.Dir");
        }
        final DirMeta meta = createDirMetaNode("Dir", oid, objname, server);
        if (meta != null) {
            meta.registerTableNodes( this, server );

            // Note that when using standard metadata,
            // the returned object must implement the "DirMBean"
            // interface.
            //
            final DirMBean group = (DirMBean) createDirMBean("Dir", oid, objname, server);
            meta.setInstance( group );
            registerGroupNode("Dir", oid, objname, meta, group, server);
        }
    }


    /**
     * Factory method for "Dir" group metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param groupName Name of the group ("Dir")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "Dir" group (DirMeta)
     * 
     **/
    protected DirMeta createDirMetaNode(String groupName,
                String groupOid, ObjectName groupObjname, MBeanServer server)  {
        return new DirMeta(this, objectserver);
    }


    /**
     * Factory method for "Dir" group MBean.
     * 
     * You can redefine this method if you need to replace the default
     * generated MBean class with your own customized class.
     * 
     * @param groupName Name of the group ("Dir")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the MBean class generated for the
     *         "Dir" group (Dir)
     * 
     * Note that when using standard metadata,
     * the returned object must implement the "DirMBean"
     * interface.
     **/
    protected Object createDirMBean(String groupName,
                String groupOid,  ObjectName groupObjname, MBeanServer server)  {

        // Note that when using standard metadata,
        // the returned object must implement the "DirMBean"
        // interface.
        //
        if (server != null) 
            return new Dir(this,server);
        else 
            return new Dir(this);
    }


    // ------------------------------------------------------------
    // 
    // Initialization of the "General" group.
    // 
    // ------------------------------------------------------------


    /**
     * Initialization of the "General" group.
     * 
     * To disable support of this group, redefine the 
     * "createGeneralMetaNode()" factory method, and make it return "null"
     * 
     * @param server    MBeanServer for this group (may be null)
     * 
     **/
    protected void initGeneral(MBeanServer server) 
        throws Exception {
        final String oid = getGroupOid("General", "1.3.6.1.4.1.38350.1");
        ObjectName objname = null;
        if (server != null) {
            objname = getGroupObjectName("General", oid, mibName + ":name=org.xtreemfs.common.monitoring.generatedcode.General");
        }
        final GeneralMeta meta = createGeneralMetaNode("General", oid, objname, server);
        if (meta != null) {
            meta.registerTableNodes( this, server );

            // Note that when using standard metadata,
            // the returned object must implement the "GeneralMBean"
            // interface.
            //
            final GeneralMBean group = (GeneralMBean) createGeneralMBean("General", oid, objname, server);
            meta.setInstance( group );
            registerGroupNode("General", oid, objname, meta, group, server);
        }
    }


    /**
     * Factory method for "General" group metadata class.
     * 
     * You can redefine this method if you need to replace the default
     * generated metadata class with your own customized class.
     * 
     * @param groupName Name of the group ("General")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the metadata class generated for the
     *         "General" group (GeneralMeta)
     * 
     **/
    protected GeneralMeta createGeneralMetaNode(String groupName,
                String groupOid, ObjectName groupObjname, MBeanServer server)  {
        return new GeneralMeta(this, objectserver);
    }


    /**
     * Factory method for "General" group MBean.
     * 
     * You can redefine this method if you need to replace the default
     * generated MBean class with your own customized class.
     * 
     * @param groupName Name of the group ("General")
     * @param groupOid  OID of this group
     * @param groupObjname ObjectName for this group (may be null)
     * @param server    MBeanServer for this group (may be null)
     * 
     * @return An instance of the MBean class generated for the
     *         "General" group (General)
     * 
     * Note that when using standard metadata,
     * the returned object must implement the "GeneralMBean"
     * interface.
     **/
    protected Object createGeneralMBean(String groupName,
                String groupOid,  ObjectName groupObjname, MBeanServer server)  {

        // Note that when using standard metadata,
        // the returned object must implement the "GeneralMBean"
        // interface.
        //
        if (server != null) 
            return new General(this,server);
        else 
            return new General(this);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "registerTableMeta" method defined in "SnmpMib".
    // See the "SnmpMib" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public void registerTableMeta( String name, SnmpMibTable meta) {
        if (metadatas == null) return;
        if (name == null) return;
        metadatas.put(name,meta);
    }


    // ------------------------------------------------------------
    // 
    // Implements the "getRegisteredTableMeta" method defined in "SnmpMib".
    // See the "SnmpMib" Javadoc API for more details.
    // 
    // ------------------------------------------------------------

    public SnmpMibTable getRegisteredTableMeta( String name ) {
        if (metadatas == null) return null;
        if (name == null) return null;
        return (SnmpMibTable) metadatas.get(name);
    }

    public SnmpStandardObjectServer getStandardObjectServer() {
        if (objectserver == null) 
            objectserver = new SnmpStandardObjectServer();
        return objectserver;
    }

    private boolean isInitialized = false;

    protected SnmpStandardObjectServer objectserver;

    protected final Hashtable metadatas = new Hashtable();
}
